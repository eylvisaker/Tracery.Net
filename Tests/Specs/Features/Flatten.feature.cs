// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Flatten")]
    public partial class FlattenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Flatten.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Flatten", "\tWhen some text is flattened it should return an appropriate string.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Flatten a single string.")]
        [NUnit.Framework.TestCaseAttribute("hello", new string[0])]
        [NUnit.Framework.TestCaseAttribute("disarm", new string[0])]
        [NUnit.Framework.TestCaseAttribute("sky", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ragged", new string[0])]
        [NUnit.Framework.TestCaseAttribute("sisters", new string[0])]
        [NUnit.Framework.TestCaseAttribute("hunt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Abstraction is often one floor above you.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("How was the math test?", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Cats are good pets, for they are clean and are not noisy.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("I want to buy a onesie… but know it won’t suit me.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("The shooter says goodbye to his love.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("There was no ice cream in the freezer, nor did they have money to go to the store" +
            ".", new string[0])]
        [NUnit.Framework.TestCaseAttribute("This is a Japanese doll.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("He said he was not there yesterday; however, many people saw him there.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("The river stole the gods.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("She was too short to see over the fence.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Wow, does that work?", new string[0])]
        [NUnit.Framework.TestCaseAttribute("She only paints with bold colors; she does not like pastels.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Let me help you with your baggage.", new string[0])]
        [NUnit.Framework.TestCaseAttribute("A purple pig and a green donkey flew a kite in the middle of the night and ended " +
            "up sunburnt.", new string[0])]
        public virtual void FlattenASingleString_(string @string, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Flatten a single string.", exampleTags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given(string.Format("I have a string to be flattened: \"{0}\".", @string), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.When("I flatten it.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.Then(string.Format("It should return \"{0}\".", @string), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
